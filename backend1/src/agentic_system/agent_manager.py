from typing import Dict, List
from datetime import datetime
import asyncio

from .agents.base_agent import BaseAgent
from .agents.simple_agent import SimpleAgent
from .agents.pydanticai_agent import PydanticAIAgent
from .agents.langchain_agent import LangchainAgent
from .agents.coordinator_agent import CoordinatorAgent
from .file_manager import file_manager


class AgentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.agents: Dict[str, BaseAgent] = {}
        self.chat_history: Dict[str, List[Dict]] = {}
        self._initialize_agents()
    
    def _initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        # –ë–∞–∑–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã
        simple_agent = SimpleAgent()
        pydantic_agent = PydanticAIAgent()
        langchain_agent = LangchainAgent()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã
        base_agents = {
            "simple": simple_agent,
            "pydantic": pydantic_agent,
            "langchain": langchain_agent
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å –±–∞–∑–æ–≤—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        coordinator = CoordinatorAgent(base_agents)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
        self.agents.update(base_agents)
        self.agents["coordinator"] = coordinator
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–∞–∫ –∞–≥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Agent-To-Agent
        self.default_agent = "coordinator"
        
        print(f"–ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ê–≥–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.default_agent}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {list(self.agents.keys())}")
    
    async def process_question(self, file_id: str, question: str, user_id: int, agent_type: str = None) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        file_info = file_manager.get_file_info(file_id, user_id)
        if not file_info:
            return {
                "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
                "file_id": file_id,
                "question": question,
                "answer": None,
                "response_time": datetime.now(),
                "agent_type": None
            }
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        file_content = file_manager.get_file_content(file_id, user_id)
        if not file_content:
            return {
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
                "file_id": file_id,
                "question": question,
                "answer": None,
                "response_time": datetime.now(),
                "agent_type": None
            }
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        selected_agent = self.agents[self.default_agent]
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
            answer = await selected_agent.process_request(file_content, question, file_info=file_info)
            
            response = {
                "file_id": file_id,
                "question": question,
                "answer": answer,
                "response_time": datetime.now(),
                "agent_type": selected_agent.name,
                "file_info": {
                    "filename": file_info.get("original_filename"),
                    "file_size": file_info.get("file_size"),
                    "content_type": file_info.get("content_type")
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self._save_to_history(file_id, question, answer, selected_agent.name, user_id)
            
            return response
            
        except Exception as e:
            return {
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}",
                "file_id": file_id,
                "question": question,
                "answer": None,
                "response_time": datetime.now(),
                "agent_type": selected_agent.name if 'selected_agent' in locals() else None
            }
    
    def _save_to_history(self, file_id: str, question: str, answer: str, agent_type: str, user_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–∞–π–ª–∞
        history_key = f"{user_id}_{file_id}"
        
        if history_key not in self.chat_history:
            self.chat_history[history_key] = []
        
        self.chat_history[history_key].append({
            "timestamp": datetime.now().isoformat(),
            "question": question,
            "answer": answer,
            "agent_type": agent_type
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.chat_history[history_key]) > 50:
            self.chat_history[history_key] = self.chat_history[history_key][-50:]
    
    def get_chat_history(self, file_id: str, user_id: int) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        history_key = f"{user_id}_{file_id}"
        return self.chat_history.get(history_key, [])
    
    def get_available_agents(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        agents_list = []
        for key, agent in self.agents.items():
            agents_list.append({
                "id": key,
                "name": agent.name,
                "description": agent.description,
                "capabilities": getattr(agent, 'capabilities', [
                    "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞",
                    "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"
                ]),
                "status": "active" if getattr(agent, 'available', True) else "inactive"
            })
        return agents_list
    
    def clear_chat_history(self, file_id: str, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        history_key = f"{user_id}_{file_id}"
        if history_key in self.chat_history:
            del self.chat_history[history_key]
            return True
        return False
    
    async def chat_with_file(self, file_id: str, question: str, user_id: int, agent_type: str = None) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Ç–∞ —Å —Ñ–∞–π–ª–æ–º (–¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞)"""
        response = await self.process_question(file_id, question, user_id, agent_type)
        
        if "error" in response:
            return f"‚ùå –û—à–∏–±–∫–∞: {response['error']}"
        
        return f"ü§ñ [{response['agent_type']}]: {response['answer']}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
agent_manager = AgentManager() 