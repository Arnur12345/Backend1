"""
–ê–≥–µ–Ω—Ç-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è Agent-To-Agent –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import asyncio
from typing import Dict, Any, List, Optional
from .base_agent import BaseAgent


class CoordinatorAgent(BaseAgent):
    """
    –ê–≥–µ–Ω—Ç-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
    –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç Agent-To-Agent –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    """
    
    def __init__(self, agents: Dict[str, BaseAgent]):
        super().__init__()
        self.agents = agents
        self.conversation_history = []
    
    async def process_request(self, file_content: str, question: str, **kwargs) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—è —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
            primary_agent = self._select_primary_agent(question)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            primary_response = await primary_agent.process_request(file_content, question, **kwargs)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if self._needs_secondary_agent(question, primary_response):
                secondary_agent = self._select_secondary_agent(question, primary_response)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                secondary_question = self._create_secondary_question(question, primary_response)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                secondary_response = await secondary_agent.process_request(
                    file_content, secondary_question, **kwargs
                )
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
                final_response = self._combine_responses(
                    primary_response, secondary_response, question
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                self._save_interaction_history(
                    question, primary_agent.name, primary_response,
                    secondary_agent.name, secondary_response, final_response
                )
                
                return final_response
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                self._save_simple_interaction(question, primary_agent.name, primary_response)
                return primary_response
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {str(e)}"
    
    def _select_primary_agent(self, question: str) -> BaseAgent:
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        question_lower = question.lower()
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        if any(word in question_lower for word in ['–∞–Ω–∞–ª–∏–∑', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–¥–∞–Ω–Ω—ã–µ', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']):
            return self.agents.get('pydantic', list(self.agents.values())[0])
        elif any(word in question_lower for word in ['—Ä–µ–∑—é–º–µ', '–∫—Ä–∞—Ç–∫–æ–µ', '—Å—É—Ç—å', '–æ—Å–Ω–æ–≤–Ω–æ–µ']):
            return self.agents.get('simple', list(self.agents.values())[0])
        elif any(word in question_lower for word in ['–¥–µ—Ç–∞–ª—å–Ω–æ', '–ø–æ–¥—Ä–æ–±–Ω–æ', '–≥–ª—É–±–æ–∫–∏–π']):
            return self.agents.get('langchain', list(self.agents.values())[0])
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            return list(self.agents.values())[0]
    
    def _needs_secondary_agent(self, question: str, primary_response: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≤—Ç–æ—Ä–æ–π –∞–≥–µ–Ω—Ç"""
        question_lower = question.lower()
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        complex_keywords = ['—Å—Ä–∞–≤–Ω–∏', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–¥–µ—Ç–∞–ª—å–Ω–æ', '–≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ', '–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ']
        
        if any(keyword in question_lower for keyword in complex_keywords):
            return True
        
        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        if len(primary_response.split()) < 50:
            return True
            
        return False
    
    def _select_secondary_agent(self, question: str, primary_response: str) -> BaseAgent:
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
        available_agents = list(self.agents.values())
        
        if len(available_agents) > 1:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            return available_agents[1]
        else:
            # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∂–µ
            return available_agents[0]
    
    def _create_secondary_question(self, original_question: str, primary_response: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        return f"""
        –î–æ–ø–æ–ª–Ω–∏ –∏ —É–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{original_question}"
        
        –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {primary_response}
        
        –î–æ–±–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è.
        """
    
    def _combine_responses(self, primary: str, secondary: str, question: str) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç –¥–≤—É—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return f"""
ü§ñ **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:**

**–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑:**
{primary}

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**
{secondary}

---
*–û—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Agent-To-Agent –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã*
        """.strip()
    
    def _save_interaction_history(self, question: str, agent1_name: str, response1: str,
                                agent2_name: str, response2: str, final_response: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        interaction = {
            "question": question,
            "primary_agent": agent1_name,
            "primary_response": response1,
            "secondary_agent": agent2_name,
            "secondary_response": response2,
            "final_response": final_response,
            "timestamp": self._get_timestamp()
        }
        self.conversation_history.append(interaction)
    
    def _save_simple_interaction(self, question: str, agent_name: str, response: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–¥–Ω–∏–º –∞–≥–µ–Ω—Ç–æ–º"""
        interaction = {
            "question": question,
            "primary_agent": agent_name,
            "primary_response": response,
            "final_response": response,
            "timestamp": self._get_timestamp()
        }
        self.conversation_history.append(interaction)
    
    def get_interaction_history(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–æ–≤"""
        return self.conversation_history
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        self.conversation_history.clear()
    
    @property
    def name(self) -> str:
        return "coordinator"
    
    @property
    def description(self) -> str:
        return "–ê–≥–µ–Ω—Ç-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Agent-To-Agent –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º" 